#ifndef X_SYNTAX_FACTS_H
#define X_SYNTAX_FACTS_H

/**
 * @brief Define a collection of return types.
 */
enum
{
  BOOLEAN_RETURN_TYPE,
  NIL_RETURN_TYPE,
  NUMBER_RETURN_TYPE,
};

/**
 * @brief Define a collection of character tokens.
 */
enum
{
  /**
   * @brief General Purpose Tokens.
   */
  DOT,
  EOE,
  LEXER_EOF,
  EOL,
  SPACE,
  STAR,
  SYMBOL,
  TAB,
  TEXT,
  UNDEFINED,
  WORD,

  /**
   * @brief Numeric Tokens.
   */
  DECIMAL,
  NUMBER,

  /**
   * @brief Mathematical Operator Tokens.
   */
  ADDITION,
  DIVISION,
  EQUAL,
  EXPONENTIAL,
  MODULUS,
  REMAINDER,
  SUBTRACTION,

  /**
   * @brief Bitwise Operator Tokens.
   */
  BITWISE_AND,
  BITWISE_OR,
  BITWISE_TERNARY,
  BITWISE_XOR,
  BITWISE_SHIFT_LEFT,
  BITWISE_SHIFT_RIGHT,

  /**
   * @brief Conditional Tokens.
   */
  CONDITIONAL_AND,
  CONDITIONAL_OR,

  /**
   * @brief Containment Tokens.
   */
  LEFT_CARET,
  OPEN_CURLY_BRACKET,
  OPEN_PARENTHESIS,
  OPEN_SQUARE_BRACKET,
  CLOSE_CURLY_BRACKET,
  CLOSE_PARENTHESIS,
  CLOSE_SQUARE_BRACKET,
  RIGHT_CARET,

  /**
   * @brief Architecture Tokens.
   */
  LAMBDA,

  /**
   * @brief Comparator Tokens.
   */
  EQUALS,

  /**
   * @brief Iterator Tokens.
   */
  DECREMENT,
  INCREMENT,

  /**
   * @brief Separator Tokens.
   */
  COLON,
  COMMA,

  /**
   * @brief Special Tokens.
   */
  ANNOTATION,

  /**
   * @brief Reserved Word Tokens.
   */
  ABSTRACT,
  BOOLEAN,
  BREAK,
  CASE,
  CLASS,
  CONST,
  DEFAULT,
  DOUBLE,
  EXPORT,
  FALSE,
  FLOAT,
  FOR,
  IF,
  IMMUTABLE,
  IMPORT,
  INTEGER,
  IS,
  MATRIX,
  NIL,
  OBJECT,
  PACKAGE,
  PRINT,
  PRIVATE,
  PROTECTED,
  PUBLIC,
  RETURN,
  SCALAR,
  SET,
  STATIC,
  STRING,
  SWITCH,
  TRUE,
  UNLESS,
  VECTOR,
  VOID,
  WHILE,
  YIELD,
};

/**
 * @brief Reserved Words.
 */
enum
{
  ABSTRACT_RESERVED_WORD = 7572149969927417,
  BOOLEAN_RESERVED_WORD = 229460885180549,
  BREAK_RESERVED_WORD = 210707980106,
  CASE_RESERVED_WORD = 6385108193,
  CLASS_RESERVED_WORD = 210708946651,
  CONST_RESERVED_WORD = 210709068620,
  DEFAULT_RESERVED_WORD = 229463065711754,
  DOUBLE_RESERVED_WORD = 6953438632736,
  EXPORT_RESERVED_WORD = 6953488276103,
  FALSE_RESERVED_WORD = 210712121072,
  FLOAT_RESERVED_WORD = 210712519067,
  FOR_RESERVED_WORD = 193491852,
  IF_RESERVED_WORD = 5863476,
  IMMUTABLE_RESERVED_WORD = 249892661372121605,
  IMPORT_RESERVED_WORD = 6953631772544,
  INTEGER_RESERVED_WORD = 193495088,
  IS_RESERVED_WORD = 5863489,
  MATRIX_RESERVED_WORD = 6953774229786,
  NIL_RESERVED_WORD = 6385525056,
  OBJECT_RESERVED_WORD = 6953853312764,
  PACKAGE_RESERVED_WORD = 229478403565457,
  PRINT_RESERVED_WORD = 210724587794,
  PRIVATE_RESERVED_WORD = 229479076378400,
  PROTECTED_RESERVED_WORD = 249902721850767151,
  PUBLIC_RESERVED_WORD = 6953914700964,
  RETURN_RESERVED_WORD = 6953974653989,
  SCALAR_RESERVED_WORD = 6954010724379,
  SET_RESERVED_WORD = 193505681,
  STATIC_RESERVED_WORD = 6954030893997,
  STRING_RESERVED_WORD = 6954031493116,
  SWITCH_RESERVED_WORD = 6954034739063,
  TRUE_RESERVED_WORD = 6385737701,
  UNLESS_RESERVED_WORD = 6954102428575,
  VECTOR_RESERVED_WORD = 6954130583448,
  VOID_RESERVED_WORD = 6385805911,
  WHILE_RESERVED_WORD = 210732529790,
  YIELD_RESERVED_WORD = 210734933212,
};

int precedence(int kind);

#endif/*X_SYNTAX_FACTS_H*/
